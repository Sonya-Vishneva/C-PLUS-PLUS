1. Напишите программу, которая считывает названия трёх книг по одному в строке и выводит их в обратном порядке, тоже по одному в строке. 
#include <iostream>
#include <string>

using namespace std;

int main() {
    string b1;
        string b2;
        string b3;
    getline (cin, b1);
    getline (cin, b2);
    getline (cin, b3);
 cout << b3 <<'\n'<<b2<< '\n' << b1;
    return 0;
}

2. Считайте пять слов, разделённых пробельными символами, и выведите их первые символы слитно как строку.
#include <iostream>
#include <string>

using namespace std;

int main() {
    string b1;
        string b2;
        string b3;
    getline (cin, b1);
    getline (cin, b2);
    getline (cin, b3);
 cout << b3 <<'\n'<<b2<< '\n' << b1;
    return 0;
}

3. Напишите код, который сравнивает половины апельсина. Программа считывает два вещественных числа — размеры половинок. Если числа равны, программа должна выводить на экран The orange is divided into two equal parts. Если первое число больше, пусть программа выводит Cut off X from the first part. Если больше второе число — пусть выводит Cut off X from the second part. Вместо X подставьте разницу в размере.
#include <iostream>

using namespace std;

int main() {
    float x,y;
    cin >> x >> y;
    if (x>y) {string str="Cut off "s + to_string(x-y) + " from the first part"s; cout << str;}
    else if (x==y) {string str="The orange is divided into two equal parts"s; cout <<str;} 
    else {string str= "Cut off "s + to_string(y-x)+ " from the second part"s; cout << str;}   
}

4. Напишите программу, которая считывает три целых числа и проверяет, что ровно два из них — положительные. Например, если на вход подаётся 1 1 0, программа должна вывести true, а если введено 1 1 1 или 0 0 0 — false. Попробуйте решить задачу, не применяя if.
#include <iostream>

using namespace std;

int main() {    
    int a, b, c;
    cin >> a >> b >> c;
cout<<boolalpha<<((a>0)+(b>0)+(c>0)==2)<<endl;}

5. Теперь выведите сами слова, заключённые в квадратные скобки. Например, если ввод был green  parrot, вывод должен быть:
[green]
[]
[parrot] 
В квадратных скобках посередине здесь — пустое слово. То есть между скобками ничего нет, так как в исходной строке было два пробела подряд. Накапливайте в строковую переменную символы текущего слова. Когда слово закончится, выведите его в квадратных скобках и начните накапливать следующее.
#include <iostream>
#include <string>

using namespace std;

int main() {
string s;
getline(cin, s);
std::string delimiter = " ";
size_t pos = 0;
std::string token;
while ((pos = s.find(delimiter)) != std::string::npos) {
    token = s.substr(0, pos);
    std::cout << "[" << token << "]"<< std::endl;
    s.erase(0, pos + delimiter.length());
}
std::cout << "[" << s << "]" << std::endl;

}

6. Обратитесь по индексу к существующим и несуществующим элементам вектора. Напишите программу, которая считывает номер месяца в нумерации с нуля (0 — это январь, 11 — декабрь) и выводит количество дней в нём.
#include <iostream>
#include <vector>

using namespace std;

int main() {
		vector<int> month_lengths = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
int month_index;
cin >> month_index;
cout << month_lengths[month_index];
    // считайте номер месяца
		// и выведите количество дней в нём
}

7. #include <iostream>
#include <string>
#include <vector>

using namespace std;
int main() {
string query;
getline(cin, query);
    string word=""s;
vector<string> words;
    if (query.size() == 0){
cout << "[]\n";
} else {
for (int i=0; i<query.size(); ++i) {
 if (query[i] != ' ')
        {
            word = word + query[i];
        }
else if (query[i] == ' ')
        {   
    words.push_back(word);
       word=""s;}
if (i == query.size()-1) {
        words.push_back(word);
    }
    }
for (string word : words) {
    cout << '[' << word << ']' << endl; 
}
}
} 

