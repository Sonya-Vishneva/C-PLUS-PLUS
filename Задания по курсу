1. Напишите программу, которая считывает названия трёх книг по одному в строке и выводит их в обратном порядке, тоже по одному в строке. 
#include <iostream>
#include <string>

using namespace std;

int main() {
    string b1;
        string b2;
        string b3;
    getline (cin, b1);
    getline (cin, b2);
    getline (cin, b3);
 cout << b3 <<'\n'<<b2<< '\n' << b1;
    return 0;
}

2. Считайте пять слов, разделённых пробельными символами, и выведите их первые символы слитно как строку.
#include <iostream>
#include <string>

using namespace std;

int main() {
    string b1;
        string b2;
        string b3;
    getline (cin, b1);
    getline (cin, b2);
    getline (cin, b3);
 cout << b3 <<'\n'<<b2<< '\n' << b1;
    return 0;
}

3. Напишите код, который сравнивает половины апельсина. Программа считывает два вещественных числа — размеры половинок. Если числа равны, программа должна выводить на экран The orange is divided into two equal parts. Если первое число больше, пусть программа выводит Cut off X from the first part. Если больше второе число — пусть выводит Cut off X from the second part. Вместо X подставьте разницу в размере.
#include <iostream>

using namespace std;

int main() {
    float x,y;
    cin >> x >> y;
    if (x>y) {string str="Cut off "s + to_string(x-y) + " from the first part"s; cout << str;}
    else if (x==y) {string str="The orange is divided into two equal parts"s; cout <<str;} 
    else {string str= "Cut off "s + to_string(y-x)+ " from the second part"s; cout << str;}   
}

4. Напишите программу, которая считывает три целых числа и проверяет, что ровно два из них — положительные. Например, если на вход подаётся 1 1 0, программа должна вывести true, а если введено 1 1 1 или 0 0 0 — false. Попробуйте решить задачу, не применяя if.
#include <iostream>

using namespace std;

int main() {    
    int a, b, c;
    cin >> a >> b >> c;
cout<<boolalpha<<((a>0)+(b>0)+(c>0)==2)<<endl;}

5. Теперь выведите сами слова, заключённые в квадратные скобки. Например, если ввод был green  parrot, вывод должен быть:
[green]
[]
[parrot] 
В квадратных скобках посередине здесь — пустое слово. То есть между скобками ничего нет, так как в исходной строке было два пробела подряд. Накапливайте в строковую переменную символы текущего слова. Когда слово закончится, выведите его в квадратных скобках и начните накапливать следующее.
#include <iostream>
#include <string>

using namespace std;

int main() {
string s;
getline(cin, s);
std::string delimiter = " ";
size_t pos = 0;
std::string token;
while ((pos = s.find(delimiter)) != std::string::npos) {
    token = s.substr(0, pos);
    std::cout << "[" << token << "]"<< std::endl;
    s.erase(0, pos + delimiter.length());
}
std::cout << "[" << s << "]" << std::endl;

}

6. Обратитесь по индексу к существующим и несуществующим элементам вектора. Напишите программу, которая считывает номер месяца в нумерации с нуля (0 — это январь, 11 — декабрь) и выводит количество дней в нём.
#include <iostream>
#include <vector>

using namespace std;

int main() {
		vector<int> month_lengths = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
int month_index;
cin >> month_index;
cout << month_lengths[month_index];
    // считайте номер месяца
		// и выведите количество дней в нём
}

7. #include <iostream>
#include <string>
#include <vector>

using namespace std;
int main() {
string query;
getline(cin, query);
    string word=""s;
vector<string> words;
    if (query.size() == 0){
cout << "[]\n";
} else {
for (int i=0; i<query.size(); ++i) {
 if (query[i] != ' ')
        {
            word = word + query[i];
        }
else if (query[i] == ' ')
        {   
    words.push_back(word);
       word=""s;}
if (i == query.size()-1) {
        words.push_back(word);
    }
    }
for (string word : words) {
    cout << '[' << word << ']' << endl; 
}
}
} 
8. Люди стоят в очереди, но никогда не уходят из её начала, зато могут приходить в конец и уходить оттуда. Также некоторые могут начинать и прекращать **беспокоиться из-за того, что очередь не продвигается.
Реализуйте обработку следующих операций над очередью:
WORRY i: пометить i-го человека с начала очереди (в нумерации с 0) как беспокоящегося;
QUIET i: пометить i-го человека (в нумерации с 0) как успокоившегося;
COME k: добавить k спокойных человек в конец очереди;
COME -k: убрать k человек из конца очереди;
WORRY_COUNT: узнать количество беспокоящихся людей в очереди.
Изначально очередь пуста.
Реализовать операции WORRY, QUIET и COME позволят простые действия с вектором. Для реализации WORRY_COUNT понадобится честный подсчёт указанного числа.
Формат ввода
На вход программе подаётся количество операций Q, затем описания операций.
Для каждой операции WORRY i и QUIET i гарантируется, что человек с номером i существует в очереди на момент операции.
Для каждой операции COME -k гарантируется, что k не больше текущего размера очереди.
Все указанные гарантии действительно справедливы для всех запросов. Проверять их не нужно, просто пишите программу, считая, что входные данные корректны.

#include <iostream>
#include <string>
#include <vector>
 
using namespace std;
 
int main(){
    int Q=0;
    cin >> Q;
    vector<bool> worry;
    string command;
    int number;
    int w;
    int k;
 
    while ( Q>0 ){
        cin>>command;
          if(command=="WORRY_COUNT"s){
            for(bool i :worry){
                if(i){
                    ++w;
                }
            }
             cout<<w<<endl;
              w=0;
          }
        if(command=="WORRY"s){
            cin>>number;
            if(number < worry.size()){
                worry.at(number)=true;
            }
        }
        if(command=="QUIET"s){
            cin>>number;
            if(number<worry.size()){
                worry.at(number)=false;
            }
        }
        if(command=="COME"s){
            cin>>k;
            int size = worry.size()+k;
            if(size<=0){
                worry.clear();
            }
            if(size>worry.size()){
                worry.resize(size,false);}
            else{worry.resize(size);}
        }
 
        --Q;
    }   
 
    return 0;
}

9. Напишите функцию IsPalindrome(string), которая проверяет, будет ли строка палиндромом. Если строка — палиндром, пусть функция печатает 1, а если нет — 0. Пустая строка считается палиндромом.

#include <iostream>
#include <string>

using namespace std;

void IsPalindrome(string s) {
    string word;
     for(int i = s.size()-1; i >= 0; i-- )
    {
        word = word + s[i];
    }
    if(s == word) { cout << "1" << endl; }
    else { cout << "0" << endl; }
}

int main() {
    IsPalindrome(""s);
    IsPalindrome("ara"s);
    IsPalindrome("deer"s);
    return 0;
}
10. В прошлой теме вы усовершенствовали разбиение строки на слова: создали и заполнили вектор строк words. Теперь вынесите разбиение в отдельную функцию vector<string> SplitIntoWords(string text), которая принимает на вход строку и возвращает вектор слов.
#include <iostream>
#include <string>
#include <vector>
using namespace std;
vector<string> SplitIntoWords(string text) 
{
    vector<string> words;
    string word;
    for (int i = 0; i < text.size(); ++i)
    {
        if (text[i] == ' ') 
        {
            words.push_back(word);
            word = "";
        } else 
        {
            word += text[i];
        }
    }
    words.push_back(word);
    
    return words; 
}
 
int main()
{
    string query;
    getline(cin, query); 
    for (string word : SplitIntoWords(query)) 
    {
        cout << '[' << word << ']' << endl;
    }
 
    return 0;
}
11. Напишите функцию, которая называется Factorial. Она должна возвращать int, принимать int и возвращать факториал своего аргумента.
Гарантируется, что аргумент функции находится в пределах от -10 до 10. Для отрицательных аргументов функция должна возвращать 1.
#include <iostream> 
using namespace std;
int Factorial( int x){
int i = 1;
int ans = 1 ;
if ( x > 0){
for (i = 1; i<=x ; i++ ){
ans *=i;
}
return ans;
}else {
return 1;
}

}

int main(){

int b;
cin>>b;
cout<<Factorial(b);

return 0;
}
12. Напишите функцию, которая
называется PalindromeFilter,
возвращает vector<string>,
принимает vector<string> words и int min_length ,
возвращает из вектора words все строки-палиндромы длиной не меньше min_length.
#include <iostream>
#include <string>
#include <vector>

using namespace std;
bool IsPalindrome(string s)
{
int i = 0;
int size = s.size();
while(1)
{
if (!(s[i] == s[size-i-1]))
return false;
else if (( i == (size-i-1) ) || (( i - (size-i-1) ) == 1))
return true;
i++;
}
}

vector<string> PalindromeFilter(vector<string> words, int minLength)
{
vector<string> output;
vector<string>::iterator it;

for (it = words.begin(); it != words.end(); it++){
if (((*it).size() >= (unsigned)minLength) && IsPalindrome(*it))
output.push_back(*it);
}

return output;
}
13. Множества позволяют оставлять в наборе элементов только уникальные. Найдите количество уникальных строк в наборе.
Формат ввода
Сначала вводится количество строк N, затем сами строки, разделённые пробелом. Строки могут состоять только из латинских букв, цифр и символов подчёркивания.
Формат вывода
Выведите единственное целое число — количество уникальных строк в данном наборе.
#include <iostream>
#include <string>
#include <set>

using namespace std;
int main() {
    int n;
    string str;
    set<string> animals;
    cin >> n; 
    for (int i=0; i < n ; i++) {
        cin >> str;
        animals.insert(str);
    }
    cout << animals.size(); 
    return 0;
}
14. Представьте, что анализируете запросы пользователей в вашей поисковой системе. Есть слова запроса и описание животного. Посчитайте релевантность запроса — размер множества слов, которые входят и в запрос, и в описание.
#include <iostream>
#include <vector>
#include <string>
#include <set>

using namespace std;

int CalculateSimilarity(vector<string> first, vector<string> second) {
    set <string> st;
    for (int i=0; i < first.size(); i++)
    {
        st.insert(first[i]);
    }
    for (int i=0; i < second.size(); i++)
    {
        st.insert(second[i]);
    }
    return first.size()+second.size()-st.size();
}

vector<string> SplitIntoWords(string text) {
    vector<string> words;
    string word;
    for (int i = 0; i < text.size(); ++i) {
        if (text[i] == ' ') {
            words.push_back(word);
            word = "";
        } else {
            word += text[i];
        }
    }
    words.push_back(word);
    
    return words;
}

int main() {
    string query, description;

    getline(cin, query);
    getline(cin, description);

    cout << CalculateSimilarity(SplitIntoWords(query), SplitIntoWords(description)) << endl;

    return 0;
}
15. Научите свою поисковую систему отбрасывать стоп-слова. На вход примите сначала строку стоп-слов, а затем с нового абзаца — строку-запрос. Выводите только те слова, которых нет в списке запрещённых. Формат вывода слов оставьте как в заготовке кода.
Функция разбиения строки на слова у вас уже реализована, осталось сделать фильтрацию.
#include <iostream>
#include <string>
#include <vector>
#include <set>
 
using namespace std;
 
vector<string> SplitIntoWords(string text){
    vector<string> words;
    string word;
    for (int i = 0; i < text.size(); ++i){
        if (text[i] == ' '){
            words.push_back(word); 
            word = ""; 
        }else{
            word += text[i];
        }
    }
    words.push_back(word);
    return words;
}
 
int main() {
    string query;
    getline(cin, query); 
    set <string> stop_words; 
    for (string word : SplitIntoWords(query)) {
        stop_words.insert(word);
    }
 
    getline(cin, query); 
    vector<string> query_words; 
    for (string word : SplitIntoWords(query)) {
        if (stop_words.count(word) == 0) {
            query_words.push_back(word);
        }
    }
    
    for (string word : query_words) {
        cout << '[' << word << ']' << endl;
    }
}
